{"ast":null,"code":"import _objectSpread from\"C:/Users/ranas/Desktop/project/apps/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useEffect}from'react';import{reportsAPI,factsAPI}from'../services/api.js';import{mockDashboardStats,mockDailyTip}from'../services/mockData.js';export const useDashboard=()=>{const[data,setData]=useState({stats:null,dailyTip:null,loading:true,error:null});const fetchDashboardData=async()=>{try{setData(prev=>_objectSpread(_objectSpread({},prev),{},{loading:true,error:null}));// For now, use mock data while backend is being set up\n// TODO: Replace with real API calls when database is ready\nsetTimeout(()=>{setData({stats:mockDashboardStats,dailyTip:mockDailyTip,loading:false,error:null});},1000);// Simulate API delay\n// Uncomment these lines when backend is ready:\n// const statsResponse = await reportsAPI.getDashboardStats();\n// const tipResponse = await factsAPI.getRandom();\n// setData({\n//   stats: statsResponse.data,\n//   dailyTip: tipResponse.data?.fact || 'Always use strong, unique passwords for each account.',\n//   loading: false,\n//   error: null\n// });\n}catch(error){console.error('Error fetching dashboard data:',error);setData(prev=>_objectSpread(_objectSpread({},prev),{},{loading:false,error:'Failed to load dashboard data. Please try again.'}));}};const refreshData=()=>{fetchDashboardData();};useEffect(()=>{fetchDashboardData();},[]);return _objectSpread(_objectSpread({},data),{},{refreshData});};","map":{"version":3,"names":["useState","useEffect","reportsAPI","factsAPI","mockDashboardStats","mockDailyTip","useDashboard","data","setData","stats","dailyTip","loading","error","fetchDashboardData","prev","_objectSpread","setTimeout","console","refreshData"],"sources":["C:/Users/ranas/Desktop/project/apps/frontend/src/hooks/useDashboard.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { reportsAPI, factsAPI } from '../services/api.js';\r\nimport { mockDashboardStats, mockDailyTip } from '../services/mockData.js';\r\n\r\nexport const useDashboard = () => {\r\n  const [data, setData] = useState({\r\n    stats: null,\r\n    dailyTip: null,\r\n    loading: true,\r\n    error: null\r\n  });\r\n\r\n  const fetchDashboardData = async () => {\r\n    try {\r\n      setData(prev => ({ ...prev, loading: true, error: null }));\r\n      \r\n      // For now, use mock data while backend is being set up\r\n      // TODO: Replace with real API calls when database is ready\r\n      setTimeout(() => {\r\n        setData({\r\n          stats: mockDashboardStats,\r\n          dailyTip: mockDailyTip,\r\n          loading: false,\r\n          error: null\r\n        });\r\n      }, 1000); // Simulate API delay\r\n      \r\n      // Uncomment these lines when backend is ready:\r\n      // const statsResponse = await reportsAPI.getDashboardStats();\r\n      // const tipResponse = await factsAPI.getRandom();\r\n      // setData({\r\n      //   stats: statsResponse.data,\r\n      //   dailyTip: tipResponse.data?.fact || 'Always use strong, unique passwords for each account.',\r\n      //   loading: false,\r\n      //   error: null\r\n      // });\r\n    } catch (error) {\r\n      console.error('Error fetching dashboard data:', error);\r\n      setData(prev => ({\r\n        ...prev,\r\n        loading: false,\r\n        error: 'Failed to load dashboard data. Please try again.'\r\n      }));\r\n    }\r\n  };\r\n\r\n  const refreshData = () => {\r\n    fetchDashboardData();\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchDashboardData();\r\n  }, []);\r\n\r\n  return {\r\n    ...data,\r\n    refreshData\r\n  };\r\n};\r\n"],"mappings":"iIAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC3C,OAASC,UAAU,CAAEC,QAAQ,KAAQ,oBAAoB,CACzD,OAASC,kBAAkB,CAAEC,YAAY,KAAQ,yBAAyB,CAE1E,MAAO,MAAM,CAAAC,YAAY,CAAGA,CAAA,GAAM,CAChC,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGR,QAAQ,CAAC,CAC/BS,KAAK,CAAE,IAAI,CACXC,QAAQ,CAAE,IAAI,CACdC,OAAO,CAAE,IAAI,CACbC,KAAK,CAAE,IACT,CAAC,CAAC,CAEF,KAAM,CAAAC,kBAAkB,CAAG,KAAAA,CAAA,GAAY,CACrC,GAAI,CACFL,OAAO,CAACM,IAAI,EAAAC,aAAA,CAAAA,aAAA,IAAUD,IAAI,MAAEH,OAAO,CAAE,IAAI,CAAEC,KAAK,CAAE,IAAI,EAAG,CAAC,CAE1D;AACA;AACAI,UAAU,CAAC,IAAM,CACfR,OAAO,CAAC,CACNC,KAAK,CAAEL,kBAAkB,CACzBM,QAAQ,CAAEL,YAAY,CACtBM,OAAO,CAAE,KAAK,CACdC,KAAK,CAAE,IACT,CAAC,CAAC,CACJ,CAAC,CAAE,IAAI,CAAC,CAAE;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF,CAAE,MAAOA,KAAK,CAAE,CACdK,OAAO,CAACL,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACtDJ,OAAO,CAACM,IAAI,EAAAC,aAAA,CAAAA,aAAA,IACPD,IAAI,MACPH,OAAO,CAAE,KAAK,CACdC,KAAK,CAAE,kDAAkD,EACzD,CAAC,CACL,CACF,CAAC,CAED,KAAM,CAAAM,WAAW,CAAGA,CAAA,GAAM,CACxBL,kBAAkB,CAAC,CAAC,CACtB,CAAC,CAEDZ,SAAS,CAAC,IAAM,CACdY,kBAAkB,CAAC,CAAC,CACtB,CAAC,CAAE,EAAE,CAAC,CAEN,OAAAE,aAAA,CAAAA,aAAA,IACKR,IAAI,MACPW,WAAW,GAEf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}