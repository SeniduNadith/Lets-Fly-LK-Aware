{"ast":null,"code":"import _objectSpread from\"C:/Users/ranas/Desktop/project/apps/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useEffect}from'react';import{reportsAPI,factsAPI}from'../services/api';export const useDashboard=()=>{const[data,setData]=useState({stats:null,dailyTip:null,loading:true,error:null});const fetchDashboardData=async()=>{try{var _tipResponse$data;setData(prev=>_objectSpread(_objectSpread({},prev),{},{loading:true,error:null}));// Fetch dashboard statistics\nconst statsResponse=await reportsAPI.getDashboardStats();// Fetch daily security tip\nconst tipResponse=await factsAPI.getRandom();setData({stats:statsResponse.data,dailyTip:((_tipResponse$data=tipResponse.data)===null||_tipResponse$data===void 0?void 0:_tipResponse$data.fact)||'Always use strong, unique passwords for each account.',loading:false,error:null});}catch(error){console.error('Error fetching dashboard data:',error);setData(prev=>_objectSpread(_objectSpread({},prev),{},{loading:false,error:'Failed to load dashboard data. Please try again.'}));}};const refreshData=()=>{fetchDashboardData();};useEffect(()=>{fetchDashboardData();},[]);return _objectSpread(_objectSpread({},data),{},{refreshData});};","map":{"version":3,"names":["useState","useEffect","reportsAPI","factsAPI","useDashboard","data","setData","stats","dailyTip","loading","error","fetchDashboardData","_tipResponse$data","prev","_objectSpread","statsResponse","getDashboardStats","tipResponse","getRandom","fact","console","refreshData"],"sources":["C:/Users/ranas/Desktop/project/apps/frontend/src/hooks/useDashboard.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { reportsAPI, factsAPI } from '../services/api';\r\n\r\nexport const useDashboard = () => {\r\n  const [data, setData] = useState({\r\n    stats: null,\r\n    dailyTip: null,\r\n    loading: true,\r\n    error: null\r\n  });\r\n\r\n  const fetchDashboardData = async () => {\r\n    try {\r\n      setData(prev => ({ ...prev, loading: true, error: null }));\r\n      \r\n      // Fetch dashboard statistics\r\n      const statsResponse = await reportsAPI.getDashboardStats();\r\n      \r\n      // Fetch daily security tip\r\n      const tipResponse = await factsAPI.getRandom();\r\n      \r\n      setData({\r\n        stats: statsResponse.data,\r\n        dailyTip: tipResponse.data?.fact || 'Always use strong, unique passwords for each account.',\r\n        loading: false,\r\n        error: null\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching dashboard data:', error);\r\n      setData(prev => ({\r\n        ...prev,\r\n        loading: false,\r\n        error: 'Failed to load dashboard data. Please try again.'\r\n      }));\r\n    }\r\n  };\r\n\r\n  const refreshData = () => {\r\n    fetchDashboardData();\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchDashboardData();\r\n  }, []);\r\n\r\n  return {\r\n    ...data,\r\n    refreshData\r\n  };\r\n};\r\n"],"mappings":"iIAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC3C,OAASC,UAAU,CAAEC,QAAQ,KAAQ,iBAAiB,CAEtD,MAAO,MAAM,CAAAC,YAAY,CAAGA,CAAA,GAAM,CAChC,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGN,QAAQ,CAAC,CAC/BO,KAAK,CAAE,IAAI,CACXC,QAAQ,CAAE,IAAI,CACdC,OAAO,CAAE,IAAI,CACbC,KAAK,CAAE,IACT,CAAC,CAAC,CAEF,KAAM,CAAAC,kBAAkB,CAAG,KAAAA,CAAA,GAAY,CACrC,GAAI,KAAAC,iBAAA,CACFN,OAAO,CAACO,IAAI,EAAAC,aAAA,CAAAA,aAAA,IAAUD,IAAI,MAAEJ,OAAO,CAAE,IAAI,CAAEC,KAAK,CAAE,IAAI,EAAG,CAAC,CAE1D;AACA,KAAM,CAAAK,aAAa,CAAG,KAAM,CAAAb,UAAU,CAACc,iBAAiB,CAAC,CAAC,CAE1D;AACA,KAAM,CAAAC,WAAW,CAAG,KAAM,CAAAd,QAAQ,CAACe,SAAS,CAAC,CAAC,CAE9CZ,OAAO,CAAC,CACNC,KAAK,CAAEQ,aAAa,CAACV,IAAI,CACzBG,QAAQ,CAAE,EAAAI,iBAAA,CAAAK,WAAW,CAACZ,IAAI,UAAAO,iBAAA,iBAAhBA,iBAAA,CAAkBO,IAAI,GAAI,uDAAuD,CAC3FV,OAAO,CAAE,KAAK,CACdC,KAAK,CAAE,IACT,CAAC,CAAC,CACJ,CAAE,MAAOA,KAAK,CAAE,CACdU,OAAO,CAACV,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACtDJ,OAAO,CAACO,IAAI,EAAAC,aAAA,CAAAA,aAAA,IACPD,IAAI,MACPJ,OAAO,CAAE,KAAK,CACdC,KAAK,CAAE,kDAAkD,EACzD,CAAC,CACL,CACF,CAAC,CAED,KAAM,CAAAW,WAAW,CAAGA,CAAA,GAAM,CACxBV,kBAAkB,CAAC,CAAC,CACtB,CAAC,CAEDV,SAAS,CAAC,IAAM,CACdU,kBAAkB,CAAC,CAAC,CACtB,CAAC,CAAE,EAAE,CAAC,CAEN,OAAAG,aAAA,CAAAA,aAAA,IACKT,IAAI,MACPgB,WAAW,GAEf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}