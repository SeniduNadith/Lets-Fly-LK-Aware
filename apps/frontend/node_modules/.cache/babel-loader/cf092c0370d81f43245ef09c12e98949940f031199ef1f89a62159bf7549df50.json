{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { reportsAPI, factsAPI } from '../services/api.js';\nimport { mockDashboardStats, mockDailyTip } from '../services/mockData.js';\nexport const useDashboard = () => {\n  _s();\n  const [data, setData] = useState({\n    stats: null,\n    dailyTip: null,\n    loading: true,\n    error: null\n  });\n  const fetchDashboardData = async () => {\n    try {\n      setData(prev => ({\n        ...prev,\n        loading: true,\n        error: null\n      }));\n\n      // For now, use mock data while backend is being set up\n      // TODO: Replace with real API calls when database is ready\n      setTimeout(() => {\n        setData({\n          stats: mockDashboardStats,\n          dailyTip: mockDailyTip,\n          loading: false,\n          error: null\n        });\n      }, 1000); // Simulate API delay\n\n      // Uncomment these lines when backend is ready:\n      // const statsResponse = await reportsAPI.getDashboardStats();\n      // const tipResponse = await factsAPI.getRandom();\n      // setData({\n      //   stats: statsResponse.data,\n      //   dailyTip: tipResponse.data?.fact || 'Always use strong, unique passwords for each account.',\n      //   loading: false,\n      //   error: null\n      // });\n    } catch (error) {\n      console.error('Error fetching dashboard data:', error);\n      setData(prev => ({\n        ...prev,\n        loading: false,\n        error: 'Failed to load dashboard data. Please try again.'\n      }));\n    }\n  };\n  const refreshData = () => {\n    fetchDashboardData();\n  };\n  useEffect(() => {\n    fetchDashboardData();\n  }, []);\n  return {\n    ...data,\n    refreshData\n  };\n};\n_s(useDashboard, \"pw3Bs9W/wJtRwWveFkUuqiTvkao=\");","map":{"version":3,"names":["useState","useEffect","reportsAPI","factsAPI","mockDashboardStats","mockDailyTip","useDashboard","_s","data","setData","stats","dailyTip","loading","error","fetchDashboardData","prev","setTimeout","console","refreshData"],"sources":["C:/Users/seniy/Downloads/project (1)/project/apps/frontend/src/hooks/useDashboard.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { reportsAPI, factsAPI } from '../services/api.js';\r\nimport { mockDashboardStats, mockDailyTip } from '../services/mockData.js';\r\n\r\nexport const useDashboard = () => {\r\n  const [data, setData] = useState({\r\n    stats: null,\r\n    dailyTip: null,\r\n    loading: true,\r\n    error: null\r\n  });\r\n\r\n  const fetchDashboardData = async () => {\r\n    try {\r\n      setData(prev => ({ ...prev, loading: true, error: null }));\r\n      \r\n      // For now, use mock data while backend is being set up\r\n      // TODO: Replace with real API calls when database is ready\r\n      setTimeout(() => {\r\n        setData({\r\n          stats: mockDashboardStats,\r\n          dailyTip: mockDailyTip,\r\n          loading: false,\r\n          error: null\r\n        });\r\n      }, 1000); // Simulate API delay\r\n      \r\n      // Uncomment these lines when backend is ready:\r\n      // const statsResponse = await reportsAPI.getDashboardStats();\r\n      // const tipResponse = await factsAPI.getRandom();\r\n      // setData({\r\n      //   stats: statsResponse.data,\r\n      //   dailyTip: tipResponse.data?.fact || 'Always use strong, unique passwords for each account.',\r\n      //   loading: false,\r\n      //   error: null\r\n      // });\r\n    } catch (error) {\r\n      console.error('Error fetching dashboard data:', error);\r\n      setData(prev => ({\r\n        ...prev,\r\n        loading: false,\r\n        error: 'Failed to load dashboard data. Please try again.'\r\n      }));\r\n    }\r\n  };\r\n\r\n  const refreshData = () => {\r\n    fetchDashboardData();\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchDashboardData();\r\n  }, []);\r\n\r\n  return {\r\n    ...data,\r\n    refreshData\r\n  };\r\n};\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,UAAU,EAAEC,QAAQ,QAAQ,oBAAoB;AACzD,SAASC,kBAAkB,EAAEC,YAAY,QAAQ,yBAAyB;AAE1E,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC;IAC/BU,KAAK,EAAE,IAAI;IACXC,QAAQ,EAAE,IAAI;IACdC,OAAO,EAAE,IAAI;IACbC,KAAK,EAAE;EACT,CAAC,CAAC;EAEF,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI;MACFL,OAAO,CAACM,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAEH,OAAO,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAK,CAAC,CAAC,CAAC;;MAE1D;MACA;MACAG,UAAU,CAAC,MAAM;QACfP,OAAO,CAAC;UACNC,KAAK,EAAEN,kBAAkB;UACzBO,QAAQ,EAAEN,YAAY;UACtBO,OAAO,EAAE,KAAK;UACdC,KAAK,EAAE;QACT,CAAC,CAAC;MACJ,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;MAEV;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtDJ,OAAO,CAACM,IAAI,KAAK;QACf,GAAGA,IAAI;QACPH,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC,CAAC,CAAC;IACL;EACF,CAAC;EAED,MAAMK,WAAW,GAAGA,CAAA,KAAM;IACxBJ,kBAAkB,CAAC,CAAC;EACtB,CAAC;EAEDb,SAAS,CAAC,MAAM;IACda,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACL,GAAGN,IAAI;IACPU;EACF,CAAC;AACH,CAAC;AAACX,EAAA,CAtDWD,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}